{"ast":null,"code":"var _jsxFileName = \"D:\\\\CSIT WEBSITES\\\\csit-website\\\\src\\\\Components\\\\maps.js\";\nimport React from 'react';\nimport mapboxgl from 'mapbox-gl';\nmapboxgl.accessToken = 'pk.eyJ1IjoiYXF1YWltcGFjdCIsImEiOiJja2R0d2N3emswdzlwMnptcGliNTk4ZHNkIn0.jPYEzZD-aErgL25Zx9N_Kg';\nlet map;\nlet popup;\nlet source;\n\nclass Maps extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      lng: 103.851959,\n      lat: 1.290270,\n      zoom: 10.5,\n      movements: []\n    };\n    this.mapContainer = React.createRef();\n  }\n\n  getMovements(id) {\n    fetch(`https://internshipcsit.herokuapp.com/getMovementbyID?IDs=${id}`).then(r => r.json()).then(data => this.setState({\n      movements: data\n    })).catch(err => {\n      console.log(err);\n    });\n  }\n\n  componentDidMount() {\n    this.getMovements(this.props.UID);\n    map = new mapboxgl.Map({\n      container: this.mapContainer,\n      style: 'mapbox://styles/mapbox/streets-v11',\n      center: [this.state.lng, this.state.lat],\n      zoom: this.state.zoom\n    });\n    var size = 100; // Create a popup, but don't add it to the map yet.\n\n    var popup2 = new mapboxgl.Popup({\n      closeButton: false,\n      closeOnClick: false\n    });\n    popup = popup2;\n    var pulsingDot = {\n      width: size,\n      height: size,\n      data: new Uint8Array(size * size * 4),\n      // get rendering context for the map canvas when layer is added to the map\n      onAdd: function () {\n        var canvas = document.createElement('canvas');\n        canvas.width = this.width;\n        canvas.height = this.height;\n        this.context = canvas.getContext('2d');\n      },\n      // called once before every frame where the icon will be used\n      render: function () {\n        var duration = 1000;\n        var t = performance.now() % duration / duration;\n        var radius = size / 2 * 0.3;\n        var outerRadius = size / 2 * 0.7 * t + radius;\n        var context = this.context; // draw outer circle\n\n        context.clearRect(0, 0, this.width, this.height);\n        context.beginPath();\n        context.arc(this.width / 2, this.height / 2, outerRadius, 0, Math.PI * 2);\n        context.fillStyle = 'rgba(255, 200, 200,' + (1 - t) + ')';\n        context.fill(); // draw inner circle\n\n        context.beginPath();\n        context.arc(this.width / 2, this.height / 2, radius, 0, Math.PI * 2);\n        context.fillStyle = 'rgba(255, 100, 100, 1)';\n        context.strokeStyle = 'white';\n        context.lineWidth = 2 + 4 * (1 - t);\n        context.fill();\n        context.stroke(); // update this image's data with data from the canvas\n\n        this.data = context.getImageData(0, 0, this.width, this.height).data; // continuously repaint the map, resulting in the smooth animation of the dot\n\n        map.triggerRepaint(); // return `true` to let the map know that the image was updated\n\n        return true;\n      }\n    };\n    map.addImage('pulsing-dot', pulsingDot, {\n      pixelRatio: 2\n    });\n  }\n\n  getDatetime(datetime, selection) {\n    let date = new Date(datetime);\n    date = (date + \"\").split(\" \");\n    let mon = date[1];\n    let day = date[2];\n    let year = date[3];\n    let fullTime = date[4].split(\":\");\n    let hh = fullTime[0];\n    let min = fullTime[1];\n    let sec = fullTime[2]; // const monthNames = [\"January\", \"February\", \"March\", \"April\", \"May\", \"June\", \"July\", \"August\", \"September\", \"October\", \"November\", \"December\"];\n\n    let finalDatetime;\n\n    if (selection === \"d\") {\n      finalDatetime = day + \" \" + mon + \" \" + year;\n    } else if (selection === \"t\") {\n      let timing = \"AM\";\n\n      if (parseInt(hh) === 12) {\n        timing = \"PM\";\n      }\n\n      if (parseInt(hh) > 12) {\n        hh = parseInt(hh) - 12;\n        timing = \"PM\";\n      }\n\n      finalDatetime = hh + \":\" + min + \" \" + timing;\n    } else if (selection === \"dt\") {\n      finalDatetime = new Date(datetime);\n    }\n\n    return finalDatetime;\n  }\n\n  getPeople(id, enter, leave) {\n    fetch(`https://internshipcsit.herokuapp.com/getPeopleTiming?IDs=${id}`).then(r => r.json()).then(data => {\n      this.props.callbackFromParent({\n        data: data,\n        enter: enter,\n        leave: leave\n      });\n    }).catch(err => {\n      console.log(err);\n    });\n  }\n\n  componentDidUpdate() {\n    let UPoints = this.state.movements.map(x => {\n      return {\n        'type': 'Feature',\n        'properties': {\n          'movementID': x.id,\n          'enter': x.datetimeEntered,\n          'leave': x.datetimeLeft,\n          'description': `<strong>${x.locationShortaddress}</strong><p>Time Entered: ${this.getDatetime(x.datetimeEntered, 't')}</p><p>Time Left: ${this.getDatetime(x.datetimeLeft, 't')}</p><p>Date: ${this.getDatetime(x.datetimeLeft, 'd')}</p>`\n        },\n        'geometry': {\n          'type': 'Point',\n          'coordinates': [x.locationLong, x.locationLat]\n        }\n      };\n    });\n    let UMovements = this.state.movements.map(x => {\n      return [x.locationLong, x.locationLat];\n    });\n    let that = this;\n    map.addSource('route', {\n      'type': 'geojson',\n      'data': {\n        'type': 'Feature',\n        'properties': {},\n        'geometry': {\n          'type': 'LineString',\n          'coordinates': UMovements\n        }\n      }\n    });\n    map.addLayer({\n      'id': 'route',\n      'type': 'line',\n      'source': 'route',\n      'layout': {\n        'line-join': 'round',\n        'line-cap': 'round'\n      },\n      'paint': {\n        'line-color': '#888',\n        'line-width': 5\n      }\n    });\n    map.addSource('places', {\n      'type': 'geojson',\n      'data': {\n        'type': 'FeatureCollection',\n        'features': UPoints\n      }\n    }); // Add a layer showing the places.\n\n    map.addLayer({\n      'id': 'places',\n      'type': 'symbol',\n      'source': 'places',\n      'layout': {\n        // \"line-cap\": \"round\",\n        // \"line-join\": \"round\"\n        'icon-image': 'custom-marker',\n        'icon-allow-overlap': true\n      }\n    });\n    map.on('click', 'places', function (e) {\n      var description = e.features[0].properties.description;\n      var movementID = e.features[0].properties.movementID;\n      var enter = e.features[0].properties.enter;\n      var leave = e.features[0].properties.leave; // console.log(movementID)\n\n      that.getPeople(movementID, enter, leave);\n    });\n    map.on('mouseenter', 'places', function (e) {\n      // Change the cursor style as a UI indicator.\n      map.getCanvas().style.cursor = 'pointer';\n      var coordinates = e.features[0].geometry.coordinates.slice();\n      var description = e.features[0].properties.description; // Ensure that if the map is zoomed out such that multiple\n      // copies of the feature are visible, the popup appears\n      // over the copy being pointed to.\n\n      while (Math.abs(e.lngLat.lng - coordinates[0]) > 180) {\n        coordinates[0] += e.lngLat.lng > coordinates[0] ? 360 : -360;\n      } // Populate the popup and set its coordinates\n      // based on the feature found.\n\n\n      popup.setLngLat(coordinates).setHTML(description).addTo(map);\n    });\n    map.on('mouseleave', 'places', function () {\n      map.getCanvas().style.cursor = '';\n      popup.remove();\n    });\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      style: {\n        position: \"relative\",\n        height: \"300px\",\n        width: \"100%\"\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 266,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      ref: el => this.mapContainer = el,\n      style: {\n        position: \"reletive\",\n        width: \"inherit\",\n        height: \"inherit\"\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 267,\n        columnNumber: 17\n      }\n    }));\n  }\n\n}\n\nexport default Maps;","map":{"version":3,"sources":["D:/CSIT WEBSITES/csit-website/src/Components/maps.js"],"names":["React","mapboxgl","accessToken","map","popup","source","Maps","Component","constructor","props","state","lng","lat","zoom","movements","mapContainer","createRef","getMovements","id","fetch","then","r","json","data","setState","catch","err","console","log","componentDidMount","UID","Map","container","style","center","size","popup2","Popup","closeButton","closeOnClick","pulsingDot","width","height","Uint8Array","onAdd","canvas","document","createElement","context","getContext","render","duration","t","performance","now","radius","outerRadius","clearRect","beginPath","arc","Math","PI","fillStyle","fill","strokeStyle","lineWidth","stroke","getImageData","triggerRepaint","addImage","pixelRatio","getDatetime","datetime","selection","date","Date","split","mon","day","year","fullTime","hh","min","sec","finalDatetime","timing","parseInt","getPeople","enter","leave","callbackFromParent","componentDidUpdate","UPoints","x","datetimeEntered","datetimeLeft","locationShortaddress","locationLong","locationLat","UMovements","that","addSource","addLayer","on","e","description","features","properties","movementID","getCanvas","cursor","coordinates","geometry","slice","abs","lngLat","setLngLat","setHTML","addTo","remove","position","el"],"mappings":"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","sourcesContent":["import React from 'react'\r\nimport mapboxgl from 'mapbox-gl';\r\n\r\nmapboxgl.accessToken = 'pk.eyJ1IjoiYXF1YWltcGFjdCIsImEiOiJja2R0d2N3emswdzlwMnptcGliNTk4ZHNkIn0.jPYEzZD-aErgL25Zx9N_Kg';\r\n\r\nlet map\r\nlet popup\r\nlet source\r\n\r\nclass Maps extends React.Component{\r\n\r\n    constructor(props){\r\n        super(props)\r\n        \r\n        this.state = {\r\n            lng: 103.851959,\r\n            lat: 1.290270,\r\n            zoom: 10.5,\r\n            movements:[],\r\n        };\r\n\r\n        this.mapContainer = React.createRef();\r\n    }\r\n\r\n    getMovements(id){\r\n        fetch(`https://internshipcsit.herokuapp.com/getMovementbyID?IDs=${id}`).then(r => r.json()).then(data => this.setState({movements:data})).catch(err => {console.log(err)})\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.getMovements(this.props.UID)\r\n        map = new mapboxgl.Map({\r\n            container: this.mapContainer,\r\n            style: 'mapbox://styles/mapbox/streets-v11',\r\n            center: [this.state.lng, this.state.lat],\r\n            zoom: this.state.zoom\r\n        });\r\n\r\n        var size = 100\r\n        \r\n        // Create a popup, but don't add it to the map yet.\r\n        var popup2 = new mapboxgl.Popup({\r\n            closeButton: false,\r\n            closeOnClick: false\r\n        });\r\n\r\n        popup = popup2\r\n\r\n        var pulsingDot = {\r\n            width: size,\r\n            height: size,\r\n            data: new Uint8Array(size * size * 4),\r\n             \r\n            // get rendering context for the map canvas when layer is added to the map\r\n            onAdd: function () {\r\n                var canvas = document.createElement('canvas');\r\n                canvas.width = this.width;\r\n                canvas.height = this.height;\r\n                this.context = canvas.getContext('2d');\r\n            },\r\n             \r\n            // called once before every frame where the icon will be used\r\n            render: function () {\r\n                var duration = 1000;\r\n                var t = (performance.now() % duration) / duration;\r\n                \r\n                var radius = (size / 2) * 0.3;\r\n                var outerRadius = (size / 2) * 0.7 * t + radius;\r\n                var context = this.context;\r\n                \r\n                // draw outer circle\r\n                context.clearRect(0, 0, this.width, this.height);\r\n                context.beginPath();\r\n                context.arc(\r\n                    this.width / 2,\r\n                    this.height / 2,\r\n                    outerRadius,\r\n                    0,\r\n                    Math.PI * 2\r\n                );\r\n            context.fillStyle = 'rgba(255, 200, 200,' + (1 - t) + ')';\r\n            context.fill();\r\n             \r\n            // draw inner circle\r\n            context.beginPath();\r\n            context.arc(\r\n            this.width / 2,\r\n            this.height / 2,\r\n            radius,\r\n            0,\r\n            Math.PI * 2\r\n            );\r\n            context.fillStyle = 'rgba(255, 100, 100, 1)';\r\n            context.strokeStyle = 'white';\r\n            context.lineWidth = 2 + 4 * (1 - t);\r\n            context.fill();\r\n            context.stroke();\r\n             \r\n            // update this image's data with data from the canvas\r\n            this.data = context.getImageData(\r\n            0,\r\n            0,\r\n            this.width,\r\n            this.height\r\n            ).data;\r\n             \r\n            // continuously repaint the map, resulting in the smooth animation of the dot\r\n            map.triggerRepaint();\r\n             \r\n            // return `true` to let the map know that the image was updated\r\n            return true;\r\n            }\r\n        };\r\n\r\n        map.addImage('pulsing-dot', pulsingDot, { pixelRatio: 2 });\r\n    }\r\n\r\n    getDatetime(datetime, selection){\r\n        let date = new Date(datetime)\r\n        date = (date + \"\").split(\" \")\r\n        let mon = date[1]\r\n        let day = date[2]\r\n        let year = date[3]\r\n        let fullTime = date[4].split(\":\")\r\n        let hh = fullTime[0]\r\n        let min = fullTime[1]\r\n        let sec = fullTime[2]\r\n\r\n        // const monthNames = [\"January\", \"February\", \"March\", \"April\", \"May\", \"June\", \"July\", \"August\", \"September\", \"October\", \"November\", \"December\"];\r\n\r\n        let finalDatetime\r\n        if(selection === \"d\"){\r\n            finalDatetime = day + \" \" + mon + \" \" + year\r\n        }\r\n        else if(selection === \"t\"){\r\n            let timing = \"AM\"\r\n            if(parseInt(hh) === 12){\r\n                timing = \"PM\"\r\n            }\r\n            if(parseInt(hh) > 12){\r\n                hh = parseInt(hh) - 12\r\n                timing = \"PM\"\r\n            }\r\n            finalDatetime = hh + \":\" + min + \" \" + timing\r\n        }\r\n        else if(selection === \"dt\"){\r\n            finalDatetime = new Date(datetime)\r\n        }\r\n        return finalDatetime\r\n    }\r\n\r\n    getPeople(id, enter, leave)\r\n    {\r\n        fetch(`https://internshipcsit.herokuapp.com/getPeopleTiming?IDs=${id}`).then(r => r.json()).then((data) => {this.props.callbackFromParent({data:data, enter:enter, leave:leave})}).catch(err => {console.log(err)})\r\n    }\r\n\r\n    componentDidUpdate(){\r\n\r\n        let UPoints = this.state.movements.map(x => {\r\n            return({\r\n                'type': 'Feature',\r\n                'properties': {\r\n                    'movementID': x.id,\r\n                    'enter': x.datetimeEntered,\r\n                    'leave': x.datetimeLeft,\r\n                    'description':\r\n                        `<strong>${x.locationShortaddress}</strong><p>Time Entered: ${this.getDatetime(x.datetimeEntered, 't')}</p><p>Time Left: ${this.getDatetime(x.datetimeLeft, 't')}</p><p>Date: ${this.getDatetime(x.datetimeLeft, 'd')}</p>`\r\n                    },\r\n                'geometry': {\r\n                    'type': 'Point',\r\n                    'coordinates': [x.locationLong, x.locationLat]\r\n                }\r\n            })\r\n        })\r\n\r\n        let UMovements = this.state.movements.map(x => {\r\n            return([x.locationLong, x.locationLat])\r\n        })\r\n\r\n        let that = this\r\n\r\n       \r\n        map.addSource('route', {\r\n            'type': 'geojson',\r\n            'data': {\r\n                'type': 'Feature',\r\n                'properties': {},\r\n                'geometry': {\r\n                    'type': 'LineString',\r\n                    'coordinates': UMovements\r\n                }\r\n            }\r\n        });\r\n        \r\n        map.addLayer({\r\n            'id': 'route',\r\n            'type': 'line',\r\n            'source': 'route',\r\n            'layout': {\r\n                'line-join': 'round',\r\n                'line-cap': 'round'\r\n            },\r\n            'paint': {\r\n                'line-color': '#888',\r\n                'line-width': 5\r\n            }\r\n        });\r\n\r\n        map.addSource('places', {\r\n            'type': 'geojson',\r\n            'data': {\r\n                'type': 'FeatureCollection',\r\n                'features': UPoints\r\n            }\r\n        });\r\n        \r\n        // Add a layer showing the places.\r\n        map.addLayer({\r\n            'id': 'places',\r\n            'type': 'symbol',\r\n            'source': 'places',\r\n            'layout': {\r\n                // \"line-cap\": \"round\",\r\n                // \"line-join\": \"round\"\r\n                'icon-image': 'custom-marker',\r\n                'icon-allow-overlap': true\r\n            }\r\n        });\r\n        \r\n        map.on('click', 'places', function(e){\r\n            var description = e.features[0].properties.description;\r\n            var movementID = e.features[0].properties.movementID;\r\n            var enter = e.features[0].properties.enter;\r\n            var leave = e.features[0].properties.leave;\r\n            // console.log(movementID)\r\n            that.getPeople(movementID, enter, leave)\r\n        });\r\n\r\n        map.on('mouseenter', 'places', function(e) {\r\n            // Change the cursor style as a UI indicator.\r\n            map.getCanvas().style.cursor = 'pointer';\r\n            \r\n            var coordinates = e.features[0].geometry.coordinates.slice();\r\n            var description = e.features[0].properties.description;\r\n            \r\n            // Ensure that if the map is zoomed out such that multiple\r\n            // copies of the feature are visible, the popup appears\r\n            // over the copy being pointed to.\r\n            while (Math.abs(e.lngLat.lng - coordinates[0]) > 180) {\r\n                coordinates[0] += e.lngLat.lng > coordinates[0] ? 360 : -360;\r\n            }\r\n            \r\n            // Populate the popup and set its coordinates\r\n            // based on the feature found.\r\n            popup.setLngLat(coordinates).setHTML(description).addTo(map);\r\n        });\r\n            \r\n        map.on('mouseleave', 'places', function() {\r\n            map.getCanvas().style.cursor = '';\r\n            popup.remove();\r\n        });\r\n    }\r\n\r\n    render(){\r\n\r\n        return(\r\n            <div style={{position:\"relative\",height:\"300px\", width:\"100%\"}}>\r\n                <div ref={el => this.mapContainer = el} style={{position:\"reletive\", width:\"inherit\", height:\"inherit\"}}/>\r\n            </div>\r\n            \r\n        )\r\n    }\r\n}\r\n\r\nexport default Maps"]},"metadata":{},"sourceType":"module"}